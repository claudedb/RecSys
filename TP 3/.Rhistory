n_fold<-length(seed)
dim.vector.q6<-seq(from = 2, to = 20, by =1)
RMSE.q6<-data.frame(dimension=dim.vector.q6,RMSE=rep(0,length(dim.vector.q6)),
MAE=rep(0,length(dim.vector.q6)))
list("MAE"=dim.vector.q6*0)
list("MAE"=dim.vector.q6*0,"RMSE"=dim.vector.q6)
rbind(list("MAE"=rep(0,length(dim.vector.q6))),list("RMSE"=rep(0,length(dim.vector.q6))))
cbind(list("MAE"=rep(0,length(dim.vector.q6))),list("RMSE"=rep(0,length(dim.vector.q6))))
seed<-c(55,75,95,105,222,60,78,4,6,23)
n_fold<-length(seed)
dim.vector.q6<-seq(from = 2, to = 20, by =1)
RMSE.q6<-data.frame(dimension=dim.vector.q6,RMSE=rep(0,length(dim.vector.q6)),
MAE=rep(0,length(dim.vector.q6)))
cross.validation = function (k){
set.seed(k)
j<-m>0
j.test<-j
#table(as.vector(j.test),useNA='always')
j.test[sample(length(j),.90*length(j))]<-FALSE
#table(j.test,useNA='always')
j.train<-!j.test
m.test<-m.NA
m.train<-m.NA
m.train[j.test]<-NA
m.test[!j.test]<-NA
moy.row.train<-rowSums(m.train,na.rm=TRUE)/rowSums(m>0,na.rm = TRUE)
m.norm.q6<-m.train-moy.row.train
m.norm.q6[is.na(m.norm.q6)]<-0
m.norm.q6<-Matrix(m.norm.q6, sparse=TRUE)
SVD.q6<-svd(m.norm.q6)
S.q6<-SVD.q6$d
S.q6<-diag(S.q6)
U.q6<-SVD.q6$u
V.q6<-SVD.q6$v
m.moy.q6<-m.train
m.moy.q6[]<-0
m.moy.q6<-sweep(m.moy.q6,1,moy.row.train,'+')
SVD.q6=function (i)
{
#print(i)
Si<-sqrt(S.q6[1:i,1:i])
Ui<-U.q6[,1:i]
Vi<-V.q6[,1:i]
m.pred.q6<-m.moy.q6+(Ui%*%t(Si))%*%Si%*%t(Vi)
RMSE.q6<-sqrt(mean(as.matrix((m.test[!j.train]-m.pred.q6[!j.train])^2),na.rm=TRUE))
MAE.q6<-mean(as.matrix(abs(m.test[!j.train]-m.pred.q6[!j.train])),na.rm=TRUE)
return(list("RMSE"=RMSE.q6,"MAE"=MAE.q6))
}
result.SVD.q6<-result.SVD.q6+sapply(RMSE.q6$dimension,SVD.q6)
}
essai<-sapply(seed,cross.validation)
rbind(rep(0,6),rep(0,6))
seed<-c(55,75,95,105,222,60,78,4,6,23)
n_fold<-length(seed)
dim.vector.q6<-seq(from = 2, to = 20, by =1)
ndimension<-length(dim.vector.q6)
result.SVD.q6<-rbind(rep(0,ndimension))
RMSE.q6<-data.frame(dimension=dim.vector.q6,RMSE=rep(0,ndimension),
MAE=rep(0,ndimension))
result.SVD.q6<-rbind(rep(0,ndimension),rep(0,ndimension))
RMSE.q6<-data.frame(dimension=dim.vector.q6,RMSE=rep(0,ndimension),
MAE=rep(0,ndimension))
cross.validation = function (k){
set.seed(k)
j<-m>0
j.test<-j
#table(as.vector(j.test),useNA='always')
j.test[sample(length(j),.90*length(j))]<-FALSE
#table(j.test,useNA='always')
j.train<-!j.test
m.test<-m.NA
m.train<-m.NA
m.train[j.test]<-NA
m.test[!j.test]<-NA
moy.row.train<-rowSums(m.train,na.rm=TRUE)/rowSums(m>0,na.rm = TRUE)
m.norm.q6<-m.train-moy.row.train
m.norm.q6[is.na(m.norm.q6)]<-0
m.norm.q6<-Matrix(m.norm.q6, sparse=TRUE)
SVD.q6<-svd(m.norm.q6)
S.q6<-SVD.q6$d
S.q6<-diag(S.q6)
U.q6<-SVD.q6$u
V.q6<-SVD.q6$v
m.moy.q6<-m.train
m.moy.q6[]<-0
m.moy.q6<-sweep(m.moy.q6,1,moy.row.train,'+')
SVD.q6=function (i)
{
#print(i)
Si<-sqrt(S.q6[1:i,1:i])
Ui<-U.q6[,1:i]
Vi<-V.q6[,1:i]
m.pred.q6<-m.moy.q6+(Ui%*%t(Si))%*%Si%*%t(Vi)
RMSE.q6<-sqrt(mean(as.matrix((m.test[!j.train]-m.pred.q6[!j.train])^2),na.rm=TRUE))
MAE.q6<-mean(as.matrix(abs(m.test[!j.train]-m.pred.q6[!j.train])),na.rm=TRUE)
return(list("RMSE"=RMSE.q6,"MAE"=MAE.q6))
}
result.SVD.q6<-result.SVD.q6+sapply(RMSE.q6$dimension,SVD.q6)
}
essai<-sapply(seed,cross.validation)
cross.validation = function (k){
set.seed(k)
j<-m>0
j.test<-j
#table(as.vector(j.test),useNA='always')
j.test[sample(length(j),.90*length(j))]<-FALSE
#table(j.test,useNA='always')
j.train<-!j.test
m.test<-m.NA
m.train<-m.NA
m.train[j.test]<-NA
m.test[!j.test]<-NA
moy.row.train<-rowSums(m.train,na.rm=TRUE)/rowSums(m>0,na.rm = TRUE)
m.norm.q6<-m.train-moy.row.train
m.norm.q6[is.na(m.norm.q6)]<-0
m.norm.q6<-Matrix(m.norm.q6, sparse=TRUE)
SVD.q6<-svd(m.norm.q6)
S.q6<-SVD.q6$d
S.q6<-diag(S.q6)
U.q6<-SVD.q6$u
V.q6<-SVD.q6$v
m.moy.q6<-m.train
m.moy.q6[]<-0
m.moy.q6<-sweep(m.moy.q6,1,moy.row.train,'+')
SVD.q6=function (i)
{
#print(i)
Si<-sqrt(S.q6[1:i,1:i])
Ui<-U.q6[,1:i]
Vi<-V.q6[,1:i]
m.pred.q6<-m.moy.q6+(Ui%*%t(Si))%*%Si%*%t(Vi)
RMSE.q6<-sqrt(mean(as.matrix((m.test[!j.train]-m.pred.q6[!j.train])^2),na.rm=TRUE))
MAE.q6<-mean(as.matrix(abs(m.test[!j.train]-m.pred.q6[!j.train])),na.rm=TRUE)
return(list("RMSE"=RMSE.q6,"MAE"=MAE.q6))
}
result<-sapply(RMSE.q6$dimension,SVD.q6)
result.SVD.q6<-result.SVD.q6+result
return(result.SVD.q6)
}
essai<-sapply(seed,cross.validation)
cross.validation = function (k){
set.seed(k)
j<-m>0
j.test<-j
#table(as.vector(j.test),useNA='always')
j.test[sample(length(j),.90*length(j))]<-FALSE
#table(j.test,useNA='always')
j.train<-!j.test
m.test<-m.NA
m.train<-m.NA
m.train[j.test]<-NA
m.test[!j.test]<-NA
moy.row.train<-rowSums(m.train,na.rm=TRUE)/rowSums(m>0,na.rm = TRUE)
m.norm.q6<-m.train-moy.row.train
m.norm.q6[is.na(m.norm.q6)]<-0
m.norm.q6<-Matrix(m.norm.q6, sparse=TRUE)
SVD.q6<-svd(m.norm.q6)
S.q6<-SVD.q6$d
S.q6<-diag(S.q6)
U.q6<-SVD.q6$u
V.q6<-SVD.q6$v
m.moy.q6<-m.train
m.moy.q6[]<-0
m.moy.q6<-sweep(m.moy.q6,1,moy.row.train,'+')
SVD.q6=function (i)
{
#print(i)
Si<-sqrt(S.q6[1:i,1:i])
Ui<-U.q6[,1:i]
Vi<-V.q6[,1:i]
m.pred.q6<-m.moy.q6+(Ui%*%t(Si))%*%Si%*%t(Vi)
RMSE.q6<-sqrt(mean(as.matrix((m.test-m.pred.q6)^2),na.rm=TRUE))
MAE.q6<-mean(as.matrix(abs(m.test-m.pred.q6)),na.rm=TRUE)
return(list("RMSE"=RMSE.q6,"MAE"=MAE.q6))
}
result<-sapply(RMSE.q6$dimension,SVD.q6)
return(result.SVD.q6)
}
essai<-sapply(35,cross.validation)
essai
SVD.cv=function (i)
{
#print(i)
Si<-sqrt(S.q6[1:i,1:i])
Ui<-U.q6[,1:i]
Vi<-V.q6[,1:i]
m.pred.q6<-m.moy.q6+(Ui%*%t(Si))%*%Si%*%t(Vi)
RMSE.q6<-sqrt(mean(as.matrix((m.test-m.pred.q6)^2),na.rm=TRUE))
MAE.q6<-mean(as.matrix(abs(m.test-m.pred.q6)),na.rm=TRUE)
return(list("RMSE"=RMSE.q6,"MAE"=MAE.q6))
}
cross.validation = function (k){
set.seed(k)
j<-m>0
j.test<-j
#table(as.vector(j.test),useNA='always')
j.test[sample(length(j),.90*length(j))]<-FALSE
#table(j.test,useNA='always')
j.train<-!j.test
m.test<-m.NA
m.train<-m.NA
m.train[j.test]<-NA
m.test[!j.test]<-NA
moy.row.train<-rowSums(m.train,na.rm=TRUE)/rowSums(m>0,na.rm = TRUE)
m.norm.q6<-m.train-moy.row.train
m.norm.q6[is.na(m.norm.q6)]<-0
m.norm.q6<-Matrix(m.norm.q6, sparse=TRUE)
SVD.q6<-svd(m.norm.q6)
S.q6<-SVD.q6$d
S.q6<-diag(S.q6)
U.q6<-SVD.q6$u
V.q6<-SVD.q6$v
m.moy.q6<-m.train
m.moy.q6[]<-0
m.moy.q6<-sweep(m.moy.q6,1,moy.row.train,'+')
SVD.cv=function (i)
{
#print(i)
Si<-sqrt(S.q6[1:i,1:i])
Ui<-U.q6[,1:i]
Vi<-V.q6[,1:i]
m.pred.q6<-m.moy.q6+(Ui%*%t(Si))%*%Si%*%t(Vi)
RMSE.q6<-sqrt(mean(as.matrix((m.test-m.pred.q6)^2),na.rm=TRUE))
MAE.q6<-mean(as.matrix(abs(m.test-m.pred.q6)),na.rm=TRUE)
return(list("RMSE"=RMSE.q6,"MAE"=MAE.q6))
}
result<-sapply(RMSE.q6$dimension,SVD.cv)
return(result.SVD.q6)
}
essai<-sapply(35,cross.validation)
cross.validation = function (k){
set.seed(k)
j<-m>0
j.test<-j
#table(as.vector(j.test),useNA='always')
j.test[sample(length(j),.90*length(j))]<-FALSE
#table(j.test,useNA='always')
j.train<-!j.test
m.test<-m.NA
m.train<-m.NA
m.train[j.test]<-NA
m.test[!j.test]<-NA
moy.row.train<-rowSums(m.train,na.rm=TRUE)/rowSums(m>0,na.rm = TRUE)
m.norm.q6<-m.train-moy.row.train
m.norm.q6[is.na(m.norm.q6)]<-0
m.norm.q6<-Matrix(m.norm.q6, sparse=TRUE)
SVD.q6<-svd(m.norm.q6)
S.q6<-SVD.q6$d
S.q6<-diag(S.q6)
U.q6<-SVD.q6$u
V.q6<-SVD.q6$v
m.moy.q6<-m.train
m.moy.q6[]<-0
m.moy.q6<-sweep(m.moy.q6,1,moy.row.train,'+')
SVD.cv=function (i)
{
#print(i)
Si<-sqrt(S.q6[1:i,1:i])
Ui<-U.q6[,1:i]
Vi<-V.q6[,1:i]
m.pred.q6<-m.moy.q6+(Ui%*%t(Si))%*%Si%*%t(Vi)
RMSE.q6<-sqrt(mean(as.matrix((m.test-m.pred.q6)^2),na.rm=TRUE))
MAE.q6<-mean(as.matrix(abs(m.test-m.pred.q6)),na.rm=TRUE)
return(list("RMSE"=RMSE.q6,"MAE"=MAE.q6))
}
result<-sapply(RMSE.q6$dimension,SVD.cv)
return(result)
}
essai<-sapply(35,cross.validation)
essai
set.seed(35)
j<-m>0
j.test<-j
j.test[sample(length(j),.90*length(j))]<-FALSE
j.train<-!j.test
m.test<-m.NA
m.train<-m.NA
m.train[j.test]<-NA
m.test[!j.test]<-NA
moy.row.train<-rowSums(m.train,na.rm=TRUE)/rowSums(m>0,na.rm = TRUE)
m.norm.q6<-m.train-moy.row.train
m.norm.q6[is.na(m.norm.q6)]<-0
m.norm.q6<-Matrix(m.norm.q6, sparse=TRUE)
SVD.q6<-svd(m.norm.q6)
S.q6<-SVD.q6$d
S.q6<-diag(S.q6)
U.q6<-SVD.q6$u
V.q6<-SVD.q6$v
m.moy.q6<-m.train
m.moy.q6[]<-0
m.moy.q6<-sweep(m.moy.q6,1,moy.row.train,'+')
SVD.cv=function (i)
{
#print(i)
Si<-sqrt(S.q6[1:i,1:i])
Ui<-U.q6[,1:i]
Vi<-V.q6[,1:i]
m.pred.q6<-m.moy.q6+(Ui%*%t(Si))%*%Si%*%t(Vi)
RMSE.q6<-sqrt(mean(as.matrix((m.test-m.pred.q6)^2),na.rm=TRUE))
MAE.q6<-mean(as.matrix(abs(m.test-m.pred.q6)),na.rm=TRUE)
return(list("RMSE"=RMSE.q6,"MAE"=MAE.q6))
}
result<-sapply(RMSE.q6$dimension,SVD.cv)
result
cross.validation = function (k){
set.seed(k)
#set.seed(35)
j<-m>0
j.test<-j
#table(as.vector(j.test),useNA='always')
j.test[sample(length(j),.90*length(j))]<-FALSE
#table(j.test,useNA='always')
j.train<-!j.test
m.test<-m.NA
m.train<-m.NA
m.train[j.test]<-NA
m.test[!j.test]<-NA
moy.row.train<-rowSums(m.train,na.rm=TRUE)/rowSums(m>0,na.rm = TRUE)
m.norm.q6<-m.train-moy.row.train
m.norm.q6[is.na(m.norm.q6)]<-0
m.norm.q6<-Matrix(m.norm.q6, sparse=TRUE)
SVD.q6<-svd(m.norm.q6)
S.q6<-SVD.q6$d
S.q6<-diag(S.q6)
U.q6<-SVD.q6$u
V.q6<-SVD.q6$v
m.moy.q6<-m.train
m.moy.q6[]<-0
m.moy.q6<-sweep(m.moy.q6,1,moy.row.train,'+')
SVD.cv=function (i)
{
#print(i)
Si<-sqrt(S.q6[1:i,1:i])
Ui<-U.q6[,1:i]
Vi<-V.q6[,1:i]
m.pred.q6<-m.moy.q6+(Ui%*%t(Si))%*%Si%*%t(Vi)
RMSE.q6<-sqrt(mean(as.matrix((m.test-m.pred.q6)^2),na.rm=TRUE))
MAE.q6<-mean(as.matrix(abs(m.test-m.pred.q6)),na.rm=TRUE)
return(list("RMSE"=RMSE.q6,"MAE"=MAE.q6))
}
result<-sapply(RMSE.q6$dimension,SVD.cv)
}
essai<-cross.validation(35)
essai
essai<-rbind(rep(0,ndimension),rep(0,ndimension))
for(s in seed)
{
essai<-essai+cross.validation(s)/n_fold
}
essai<-rbind(rep(0,ndimension),rep(0,ndimension))
essai
essai+result
result
rownames(essai)<-c("RMSE","MAE")
essai<-rbind(rep(0,ndimension),rep(0,ndimension))
rownames(essai)<-c("RMSE","MAE")
essai+result
essai
result
essai<-as.numeric(rbind(rep(0,ndimension),rep(0,ndimension)))
rownames(essai)<-c("RMSE","MAE")
essai<-rbind(rep(0,ndimension),rep(0,ndimension))
essai<-rbind(rep(0.0,ndimension),rep(0.0,ndimension))
essai
rownames(essai)<-c("RMSE","MAE")
result+essai
result+as.matrix(essai)
Reduce(result,essai)
Reduce(-,essai)
result+essai[[]]
result+essai[]
result[1,]+essai[1,]
result[1,]+essai[[1,]]
result[1,]+essai[[1]]
essai[[1]]
essai[[1,]]
essai[[,1]]
essai[[RMSE]]
essai[["RMSE"]]
essai["RMSE"]
essai[RMSE]
essai[,RMSE]
essai[RMSE,]
essai[1,]
result[1,]
result[[1.]]
result[[1,]]
result[[]]
result[[1]]
result[[1],]
result
essai
result[RMSE,1]
result["RMSE!,1]
result["RMSE!,1]
result["RMSE",1]
result$RMSE
result["RMSE",]
as.vector(result["RMSE",])
as.matrix(result)
as.matrix(result)+essai
as.matrix(result)+as.matrix(essai)
result
essai
essai+result
dim(esult)
dim(result)
dim(essai)
typeof(result)
typeof(essai)
as.double(result)
as.double(as.matrix(result))
typeof(as.matrix(result))
matrix(nrow=2,ncol=19,as.double(result))
result
matrix(nrow=2,ncol=19,as.double(result))+essai
dim.vector.q6<-seq(from = 2, to = 20, by =1)
ndimension<-length(dim.vector.q6)
seed<-c(55,75,95,105,222,60,78,4,6,23)
n_fold<-length(seed)
dim.vector.q6<-seq(from = 2, to = 20, by =1)
ndimension<-length(dim.vector.q6)
result.SVD.q6<-rbind(rep(0,ndimension),rep(0,ndimension))
RMSE.q6<-data.frame(dimension=dim.vector.q6,RMSE=rep(0,ndimension),
MAE=rep(0,ndimension))
cross.validation = function (k){
set.seed(k)
#set.seed(35)
j<-m>0
j.test<-j
#table(as.vector(j.test),useNA='always')
j.test[sample(length(j),.90*length(j))]<-FALSE
#table(j.test,useNA='always')
j.train<-!j.test
m.test<-m.NA
m.train<-m.NA
m.train[j.test]<-NA
m.test[!j.test]<-NA
moy.row.train<-rowSums(m.train,na.rm=TRUE)/rowSums(m>0,na.rm = TRUE)
m.norm.q6<-m.train-moy.row.train
m.norm.q6[is.na(m.norm.q6)]<-0
m.norm.q6<-Matrix(m.norm.q6, sparse=TRUE)
SVD.q6<-svd(m.norm.q6)
S.q6<-SVD.q6$d
S.q6<-diag(S.q6)
U.q6<-SVD.q6$u
V.q6<-SVD.q6$v
m.moy.q6<-m.train
m.moy.q6[]<-0
m.moy.q6<-sweep(m.moy.q6,1,moy.row.train,'+')
SVD.cv=function (i)
{
#print(i)
Si<-sqrt(S.q6[1:i,1:i])
Ui<-U.q6[,1:i]
Vi<-V.q6[,1:i]
m.pred.q6<-m.moy.q6+(Ui%*%t(Si))%*%Si%*%t(Vi)
RMSE.q6<-sqrt(mean(as.matrix((m.test-m.pred.q6)^2),na.rm=TRUE))
MAE.q6<-mean(as.matrix(abs(m.test-m.pred.q6)),na.rm=TRUE)
return(list("RMSE"=RMSE.q6,"MAE"=MAE.q6))
}
result<-sapply(RMSE.q6$dimension,SVD.cv)
result<-matrix(nrow=2,ncol=length(RMSE.q6$dimension),result)
result.SVD.q6<-result.SVD.q6+result/n_fold
return(result.SVD.q6)
}
essai<-sapply(seed,cross.validation)
typeof(result.SVD.q6)
typeof(result)
cross.validation = function (k){
set.seed(k)
#set.seed(35)
j<-m>0
j.test<-j
#table(as.vector(j.test),useNA='always')
j.test[sample(length(j),.90*length(j))]<-FALSE
#table(j.test,useNA='always')
j.train<-!j.test
m.test<-m.NA
m.train<-m.NA
m.train[j.test]<-NA
m.test[!j.test]<-NA
moy.row.train<-rowSums(m.train,na.rm=TRUE)/rowSums(m>0,na.rm = TRUE)
m.norm.q6<-m.train-moy.row.train
m.norm.q6[is.na(m.norm.q6)]<-0
m.norm.q6<-Matrix(m.norm.q6, sparse=TRUE)
SVD.q6<-svd(m.norm.q6)
S.q6<-SVD.q6$d
S.q6<-diag(S.q6)
U.q6<-SVD.q6$u
V.q6<-SVD.q6$v
m.moy.q6<-m.train
m.moy.q6[]<-0
m.moy.q6<-sweep(m.moy.q6,1,moy.row.train,'+')
SVD.cv=function (i)
{
#print(i)
Si<-sqrt(S.q6[1:i,1:i])
Ui<-U.q6[,1:i]
Vi<-V.q6[,1:i]
m.pred.q6<-m.moy.q6+(Ui%*%t(Si))%*%Si%*%t(Vi)
RMSE.q6<-sqrt(mean(as.matrix((m.test-m.pred.q6)^2),na.rm=TRUE))
MAE.q6<-mean(as.matrix(abs(m.test-m.pred.q6)),na.rm=TRUE)
return(list("RMSE"=RMSE.q6,"MAE"=MAE.q6))
}
result<-sapply(RMSE.q6$dimension,SVD.cv)
result<-matrix(nrow=2,ncol=length(RMSE.q6$dimension),as.double(result))
result.SVD.q6<-result.SVD.q6+result/n_fold
return(result.SVD.q6)
}
essai<-sapply(seed,cross.validation)
essai
