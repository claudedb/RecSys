knitr::opts_chunk$set(echo = TRUE)
if(!require("pacman")) install.packages("pacman")
pacman::p_load(Matrix,data.table,tidyr,readr,dplyr,ggplot2,lsa,tidytext)
rm(list=ls())
order.partial=function(vec)
{
idx<-which(vec<=sort(vec,partial=11)[11])
idx[order(vec[idx])][2:11]
}
cosinus.vm <- function(v,m) {
n <- sqrt(colSums(m^2));k= sqrt(rowSums(t(v^2))); p=(t(v) %*% m)/k; a=t(p)/n
return(a)
}
max.nindex <- function(m, n=10) {
i <- order(m, decreasing=TRUE)
return(i[1:n])
}
max.nindex.corr <- function(m, n=6) {
i <- order(m, decreasing=TRUE)
return(i[2:n])
}
min.nindex <- function(m, n=5) {
i <- order(m, decreasing=FALSE)
return(i[1:n])
}
sprintf("Le terme qui revient le plus souvent est '%s' et il revient %d fois.",
rownames(m.poly)[which.max(rowSums(m.poly))],
max(rowSums(m.poly)))
#setwd('C:/Users/mikap/OneDrive/Documents/GitHub/RecSys/Project')
setwd('C:/Users/claudedb/Documents/GitHub/RecSys/Project')
# Data Load
text.data<-data.table(read.table("data/out.matrix",sep=" ",skip=2))
colnames(text.data)<-c('courses.id','terms.id','n')
m.text <- sparseMatrix(text.data$terms.id,text.data$courses.id,x=text.data$n)
courses.data<-read.table('data/out.docs',sep="/")
colnames(courses.data)<-c('university','code')
courses.data.poly <-courses.data[courses.data$university=='Poly',]
terms.data<-read.table('data/out.terms')
colnames(m.text) <- as.vector(courses.data[,2])
rownames(m.text) <- as.vector(terms.data[,1])
# Nous garderons seulement les cours a la polyy
# Pour l'instant nous n'avons pas de facon de tous les analyses
id.poly <- which(courses.data$university== "Poly")
m.poly <- m.text[,id.poly]
m.poly <- m.poly[,colSums(m.poly) > 20]
m.poly<-m.poly[rowSums(m.poly) > 0,]
sprintf("Le terme qui revient le plus souvent est '%s' et il revient %d fois.",
rownames(m.poly)[which.max(rowSums(m.poly))],
max(rowSums(m.poly)))
sprintf("Ce terme revient en moyenne %f fois",max(rowSums(m.poly))/dim(m.poly)[2])
sprintf('En utilisant les cours de poly seulement on utilise %d pct des mots et %d pct des documents',
round(100*dim(m.poly)[1]/dim(m.text)[1]),round(100*dim(m.poly)[2]/dim(m.text)[2]))
courses.data.poly <-courses.data[rownames(m.poly),]
dim(m.poly)
View(courses.data.poly)
courses.data.poly <-courses.data[courses.data$university=='Poly',]
View(courses.data.poly)
colnames(m.poly)
courses.data.poly2 <-courses.data[colnames(m.poly),]
View(courses.data.poly2)
View(courses.data.poly)
courses.data.poly2 <-courses.data[courses.data$code %in% colnames(m.poly),]
View(courses.data.poly2)
courses.data.poly2 <-courses.data[courses.data.poly$code %in% colnames(m.poly),]
View(courses.data.poly2)
courses.data.poly2 <-courses.data.poly[courses.data.poly$code %in% colnames(m.poly),]
View(courses.data.poly2)
m.poly <- m.poly[,colSums(m.poly) > 20]
m.poly<-m.poly[rowSums(m.poly) > 0,]
courses.data.poly <-courses.data.poly[courses.data.poly$code %in% colnames(m.poly),]
word.per.doc <- colSums(m.poly)
word.occurence <- rowSum(m.poly)
m.poly <- m.poly[,colSums(m.poly) > 20]
m.poly<-m.poly[rowSums(m.poly) > 0,]
courses.data.poly <-courses.data.poly[courses.data.poly$code %in% colnames(m.poly),]
word.per.doc <- colSums(m.poly)
word.occurence <- rowSums(m.poly)
data.frame(word.occurence)
ggplot(data.frame(word.per.doc), aes(word.per.doc))+ geom_histogram(binwidth = 5) +
ggtitle('Nombre de mots par documents') + xlab('Nombre de mots') +
ylab('Nombre de documents')
max(word.occurence)
dim(id.poly)
len(id.poly)
length(id.poly)
max.words <-max.nindex(word.occurence,20)
max.words
word.occurence[max.words]
word.occurence[max.words,1]
names(word.occurence)
max.words <-max.nindex(word.occurence,20)
max.words.table <- data.frame(terme = names(word.occurence[max.words]), n = word.occurence[max.words])
View(max.words.table)
m.poly <- m.poly[,colSums(m.poly) > 20]
m.poly<-m.poly[rowSums(m.poly) > 0,]
courses.data.poly <-courses.data.poly[courses.data.poly$code %in% colnames(m.poly),]
word.per.doc <- colSums(m.poly)
word.occurence <- rowSums(m.poly)
max.words <-max.nindex(word.occurence,20)
max.words.table <- data.frame(terme = names(word.occurence[max.words]), n = word.occurence[max.words])
max.words.table`
)
ok
stop
stop()
-
NA
odjsakdjsakjfa
1
)
()
Â¸}
m,,,,,
